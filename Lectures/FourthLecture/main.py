# Калькулятор:

# def calk1(a, b):
#     return a+b
#
# def calk2(a, b):
#     return a*b
#
# def math(op, x, y):
#     print(op(x, y))
#
# math(calk1, 5, 45)

#-----------------------------------------------------------------------------------------------------------------------

# 1. Лямбда-функция:

# def math(op, x, y):
#     print(op(x, y))
#
# math(lambda a,b: a+b, 5, 45)

# Задача:
# В списке хранятся числа. Нужно выбрать только чётные числа и составить список пар
# (число; квадрат числа).
# Пример: 1 2 3 5 8 15 23 38
# Получить: [(2, 4), (8, 64), (38, 1444)]

# some_list = [1, 2, 3, 5, 8, 15, 23, 38]
# res = list()
#
# for i in some_list:
#     if i % 2 == 0:
#         res.append((i, i**2))
#
# print(res)

# Решение этой же задачи, но через лямбда-функцию:
# def select(f, col):
#     return [f(x) for x in col]
#
# def where(f, col):
#     return [x for x in col if f(x)]
#
# some_list = [1, 2, 3, 5, 8, 15, 23, 38]
#
# res = select(int, some_list)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(select(lambda x: (x, x**2), res))
# print(res)

#-----------------------------------------------------------------------------------------------------------------------

# 2. Функция map:

# list_1 = [x for x in range(1, 20)]
# print(list_1)
#
# list_1 = list(map(lambda x: x + 10, list_1))
# print(list_1)

# Задача:
# С клавиатуры вводится некий набор чисел, в качестве разделителя используется пробел.
# Этот набор чисел будет считан в качестве строки.
# Как превратить list строк в list чисел?

# data = '5 12 55 21 155 11 1 245'
# data = list(map(int, data.split()))
#
# print(data)

# Наша задачка, но с применением функции map

# def where(f, col):
#     return [x for x in col if f(x)]
#
# some_list = [1, 2, 3, 5, 8, 15, 23, 38]
#
# res = map(int, some_list)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(map(lambda x: (x, x**2), res))
# print(res)

#-----------------------------------------------------------------------------------------------------------------------

# 3. Функция filter:

# data = [15, 65, 11, 6, 175]
# res = list(filter(lambda x: x % 10 == 5, data))
#
# print(res)

# Эта же задачка, но с функцией filter:

# some_list = [1, 2, 3, 5, 8, 15, 23, 38]
#
# res = map(int, some_list)
# res = filter(lambda x: x % 2 == 0, res)
# res = list(map(lambda x: (x, x**2), res))
# print(res)

#-----------------------------------------------------------------------------------------------------------------------

# 4. Функция zip:
# Функция zip() применяется к набору итерируемых объектов и возвращает итератор с кортежами из элементов входных данных

# zip([1, 2, 3], ['о', 'д', 'т'], ['j', 'l', 'n']

# [(1, 'о', 'j'), (2, 'д', 'l'), (3, 'т', 'n')]

# На выходе получаем набор данных, состоящий из элементов соответсвующих исходному набору

# Пример:
# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ind = [1, 2, 3, 4, 5]
# data = list(zip(users, ind))
# print(data)

# Функция zip() пробегает по минимальному входящему набору:
# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ind = [1, 2, 3, 4, 5]
# salary = [111, 222, 333]
# data = list(zip(users, ind, salary))
# print(data)

#-----------------------------------------------------------------------------------------------------------------------

# 5. Функция enumerate:
# Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с кортежами из индекса
# и элементов входных данных.

# enumerate(['Казань', 'Смоленск', 'Рыбки', 'Чикаго'])

# [(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')

# Функция enumerate() позволяет пронумеровать наобор данных

# users = ['user1', 'user2', 'user3', 'user4']
# data = list(enumerate(users))
# print(data)

#-----------------------------------------------------------------------------------------------------------------------

# 6. Файлы:
# Файлы в текстовом формате используются для:
# - Хранения данных
# - Передачи данных в клиент-серверных проектах
# - Хранения конфигов
# - Логирования действий

# Что нужно для работы с файлами:
# 1. Завести переменную. уоторая будет связана с этим текстовым файлом
# 2. Указать путь к файлу
# 3. Указать, в каком режиме мы будем работать с файлом

# Варианты режима (мод):
# a – открытие для добавления данных.
# * Позволяет дописывать что-то в имеющийся файл.
# * Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан и в него начнется запись.
#
# r – открытие для чтения данных.
# * Позволяет читать данные из файла.
# * Если вы попробуете считать данные из файла, которого не существует, программа
# выдаст ошибку.
#
# w – открытие для записи данных.
# * Позволяет записывать данные и создавать файл, если его не существует.

# Миксованные режимы:
# 1. w+
# * Позволяет открывать файл для записи и читать из него.
# * Если файла не существует, он будет создан.
#
# 2. r+
# * Позволяет открывать файл для чтения и дописывать в него.
# * Если файла не существует, программа выдаст ошибку.

# Примеры использования различных режимов в коде:
# 1. Режим a
#
# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать
# data.writelines(colors) # разделителей не будет
# data.close()
#
# ● data.close() — используется для закрытия файла, чтобы разорвать подключение файловой
# переменной с файлом на диске.
# ● exit() — позволяет не выполнять код, прописанный после этой команды в скрипте.
# ● В итоге создаётся текстовый файл с текстом внутри: redbluedreen.
# ● При повторном выполнении скрипта redbluedreenredbluedreen — добавление в
# существующий файл, а не перезапись файлов.

# Ещё один способ записи данных в файл:
# with open('file.txt', 'w') as data:
#   data.write('line 1\n')
#   data.write('line 2\n')
#
# 2. Режим r
# Чтение данных из файла:

# path = 'file.txt'
# data = open(path, 'r')
# for line in data:
#     print(line)
# data.close()

# 3. Режим w

# colors = ['red', 'green', 'blue']
# data = open('file.txt', 'w')
#  ata.writelines(colors) # разделителей не будет
# data.close()

# В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# В случае перезаписи новые данные записываются, а старые удаляются.

#-----------------------------------------------------------------------------------------------------------------------

# 7. Модуль os
# Модуль os предоставляет множество функций для работы с операционной системой, причем их
# поведение, как правило, не зависит от ОС, поэтому программы остаются переносимыми.
#
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою
# программу:
#
# import os
#
# Познакомимся с базовыми функциями данного модуля:
# ● os.chdir(path) - смена текущей директории:
# import os
# os.chdir('C:/Users/79190/PycharmProjects/GB')
#
# ● os.getcwd() - текущая рабочая директория:
# import os
# print(os.getcwd()) # 'C:\Users\79190\PycharmProjects\webproject'
#
# ● os.path - является вложенным модулем в модуль os и реализует некоторые полезные функции для работы с
# путями, такие как:
#
# 1) os.path.basename(path) - базовое имя пути
# import os
# print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) #'main.py'
#
# 2) os.path.abspath(path) - возвращает нормализованный абсолютный путь.
# import os
# print(os.path.abspath('main.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py'
#
# Это лишь малая часть возможностей модуля os.

#-----------------------------------------------------------------------------------------------------------------------

# 8. Модуль shutil
# Модуль shutil содержит набор функций высокого уровня для обработки файлов, групп файлов, и папок. В частности,
# доступные здесь функции позволяют копировать, перемещать и удалять файлы и папки. Часто используется вместе
# с модулем os.
#
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
#
# import shutil
#
# Познакомимся с базовыми функциями данного модуля:
# ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в файл dst.
# ● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
# ● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; path должен указывать на
# директорию, а не на символическую ссылку.

